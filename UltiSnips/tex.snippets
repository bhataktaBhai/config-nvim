global !p
greek_table = {
	"a" : "alpha",
	"b" : "beta",
	"c" : "gamma",
	"d" : "delta",
	"e" : "varepsilon",
	"f" : "phi",
	"g" : "gamma",
	"h" : "theta",
	"i" : "iota",
	"k" : "kappa",
	"l" : "lambda",
	"m" : "mu",
	"n" : "nu",
	"o" : "omega",
	"p" : "rho",
	"r" : "rho",
	"s" : "sigma",
	"t" : "tau",
	"u" : "mu",
	"w" : "psi",
	"x" : "chi",
	"z" : "zeta"
}

delimiters = "[ .{},;\-+=<>()'?!0-9[\]]"
units = "(kg)|(Hz)|(mol)|[msKN]"

def greek(trigger):
	upper = not trigger.islower()
	english = trigger[1]
	if not upper:
		return greek_table[english]
	greek = greek_table[english.lower()]
	return greek[0].upper() + greek[1:]

def math():
	return vim.eval("vimtex#syntax#in_mathzone()") == "1"
def text():
	return not math()

def text_after_cursor_matches(snip, string):
    (line, col) = snip.cursor
    text_after_cursor = snip.buffer[line][col:]
    return re.match(string, text_after_cursor)

def text_inside_si(snip):
	(line_no, col) = snip.cursor
	line = snip.buffer[line_no]
	index_si = line.rfind("\\si", 0, col)
	if index_si < 0:
		return False
	index_closed = line.find("}", index_si)
	return index_closed > col

def text_inside_command(snip):
	(line_no, col) = snip.cursor
	line = snip.buffer[line_no]
	index_command = line.rfind("\\", 0, col)
	if index_command < 0:
		return False
	return re.fullmatch("\\w*", line[index_command+1:col])

def space(tabstop):
	if tabstop and tabstop[0] not in {",", "_", "^", ".", "?", ";", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", " "}:
		return " "
	return ""
endglobal

snippet setup "setup" bA
\\documentclass[12pt]{article}
\\input{preamble}

\\title{$1}
\\author{Naman Mishra}
\\date{${2:\\today}}

\\begin{document}
\\maketitle

$0

\\end{document}
endsnippet

###################
##  DERIVATIVES  ##
###################
priority 20
context "math()"
snippet "([a-ce-zA-Z\\]+)(d?dot)" "post dot/ddot" rA
\\`!p snip.rv = match.group(2) + "{" + match.group(1) + "}"`
endsnippet

priority 0
context "math()"
snippet "d?dot" "pre dot/ddot" rA
\\`!p snip.rv = match.group(0)`{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet "([0-9]*)(p?dv)" "[partial] derivative" rA
\\`!p snip.rv = match.group(2) + (f'[{match.group(1)}]' if match.group(1) else '')`{$1}{$2}$0
endsnippet

#################
##  INTEGRALS  ##
#################
context "math()"
priority 10
snippet dint "definite integral" iA
\\int_{${1:a}}^{${2:b}} ${3:f(x)} \\dd ${4:x}$0
endsnippet

context "math()"
snippet tint "indefinite integral in t" iA
\\int ${1:f(t)} \\dd ${2:t}$0
endsnippet
priority 0

context "math()"
snippet "int" "indefinite integral in x" rA
\\int ${1:f(x)} \\dd ${2:x}$0
endsnippet

context "math()"
snippet dx "dx" iA
\\dd x
endsnippet

###############
##  ACCENTS  ##
###############
priority 20
context "math()"
snippet "([a-zA-Z\\]+)hat" "post hat" rA
\\hat{`!p snip.rv = match.group(1)
if snip.rv == "i" or snip.rv == "j":
	snip.rv = "\\" + snip.rv`}
endsnippet

context "math()"
snippet "([a-zA-Z\\]+)bar" "post bar" rA
\\overline{`!p snip.rv = match.group(1)
if snip.rv == "i" or snip.rv == "j":
	snip.rv = "\\" + snip.rv`}
endsnippet

priority 0
context "math()"
snippet hat "pre hat" iA
\\hat{${1:${VISUAL}}}$0
endsnippet

snippet bar "pre bar" iA
\\overline{${1:${VISUAL}}}$0
endsnippet

###############
##  PHYSICS  ##
###############
context "math()"
snippet SI "SI" iA
\\SI{$1}{$2}$0
endsnippet

context "text()"
snippet SI "SI outside math mode"
\\SI{$1}{$2}$0
endsnippet

context "math()"
snippet si "units" iA
\\;\\si{$1}$0
endsnippet

context "math()"
snippet hbar "h bar" iA
\\hslash
endsnippet

context "math()"
snippet h "Planck's constant" i
\\SI{6.626e-34}{J.s}
endsnippet

context "math()"
snippet qe "electronic charge" i
\\SI{1.602e-19}{C}
endsnippet

###########
##  ENV  ##
###########
snippet beg "begin{} / end{}" bA
\\begin{$1}$2
	${0:${VISUAL}}
\\end{$1}
endsnippet

snippet beg "begin{} / end{}"
\\begin{$1}$2
	${0:${VISUAL}}
\\end{$1}
endsnippet

snippet aln "begin{} / end{}" bA
\\begin{align*}
	${0:${VISUAL}}
\\end{align*}
endsnippet

snippet prf "proof" bA
\\begin{proof}
	${0:${VISUAL}}
\\end{proof}
endsnippet

snippet pbm "problem environment" bA
\\begin{problem}
	${0:${VISUAL}}
\\end{problem}
endsnippet

snippet ans "answer environment" bA
\\begin{answer}
	${0:${VISUAL}}
\\end{answer}
endsnippet

snippet "(rem)|(example)" "remarks" brA
\\begin{`!p snip.rv = match.group(0)`}
	${1:${VISUAL}}
\\end{`!p snip.rv = match.group(0)`}
endsnippet

snippet "(thm)|(prop)|(lem)|(cor)" "theorems" brA
\\begin{`!p snip.rv = match.group(0)`}[$1] \\label{thm:$2}
	${3:${VISUAL}}
\\end{`!p snip.rv = match.group(0)`}
endsnippet

snippet "(defn)|(axiom)" "definitions" brA
\\begin{`!p snip.rv = match.group(0)`}[$1] \\label{defn:$2}
	${3:${VISUAL}}
\\end{`!p snip.rv = match.group(0)`}
endsnippet

snippet facts "facts" bA
\\begin{facts}
	${1:${VISUAL}}
\\end{facts}
endsnippet

snippet spf "self proof" bA
\\begin{proof}[Proof \textcolor{${1:self-proof}}{(self)}]
	$0
\\end{proof}
endsnippet

snippet enm "enumerate" bA
\\begin{enumerate}[label=${1:(\alph*)}]
	\\item ${0:${VISUAL}}
\\end{enumerate}
endsnippet

snippet out "outline" bA
\\begin{outline}
	\\1 ${0:${VISUAL}}
\\end{outline}
endsnippet

snippet ctz "center tikzpicture" bA
\\begin{center}
	\\begin{tikzpicture}
		${0:${VISUAL}}
	\\end{tikzpicture}
\\end{center}
endsnippet

snippet tz "tikzpicture" bA
\\begin{tikzpicture}
	${0:${VISUAL}}
\\end{tikzpicture}
endsnippet

#####################
## TEXT FORMATTING ##
#####################
context "text()"
snippet bb "bold" A
\\textbf{${1:${VISUAL}}}$0
endsnippet

context "text()"
snippet ii "italics" iA
\\textit{${1:${VISUAL}}}$0
endsnippet

context "text()"
snippet ee "emphasis" A
\\emph{${1:${VISUAL}}}$0
endsnippet

#####################
## MATH FORMATTING ##
#####################
context "math()"
snippet bb "mathbb" iA
\\mathbb{$1}$0
endsnippet

context "math()"
snippet mcl "mathcal" iA
\\mathcal{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mcr "mathscr" iA
\\mathscr{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mfk "mathfrak" iA
\\mathfrak{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet mrm "mathrm" iA
\\mathrm{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet trm "textrm" iA
\\textrm{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet tt "\\text{}" iA
\\text{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet ^ "superscript" iA
^{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet _ "subscript" iA
_{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet "([a-zA-Z])([0-9])" "auto numerical subscript" rA
`!p snip.rv = match.group(1) + "_{" + match.group(2) + "}"`$0
endsnippet

context "math()"
snippet ~ "tilde" iA
\\tilde{${1:${VISUAL}}}$0
endsnippet

priority 10
context "math()"
snippet "([a-zA-Z\\]+)bm" "post bm" rA
\\bm{`!p snip.rv = match.group(1)`}
endsnippet

priority 0
context "math()"
snippet bm "pre bm" iA
\\bm{${1:${VISUAL}}}$0
endsnippet

#############
## MATH OP ##
#############
context "math()"
snippet <= "\\leq" iA
\\leq
endsnippet

context "math()"
snippet >= "\\geq" iA
\\geq
endsnippet

context "math()"
snippet != "\\neq" iA
\\neq
endsnippet

context "math()"
snippet +- "plus-minus" iA
\\pm
endsnippet

context "math()"
snippet ++ "increment" iA
_{++}
endsnippet

context "math()"
snippet -- "decrement" iA
_{--}
endsnippet

context "math()"
snippet xx "times" iA
\\times
endsnippet

context "math()"
snippet .. "cdot" iA
\\cdot
endsnippet

context "math()"
snippet \cdot. "dots" iA
\\dots
endsnippet

snippet ... "dots" iA
\\dots
endsnippet

#####################
##  ADD BACKSLASH  ##
#####################
context "math() and not text_inside_command(snip)"
snippet "((a?(sin)|(cos)|(tan))|(sec)|(csc)|(cot))h?" "trigonometric functions" rA
\\`!p snip.rv = match.group(0)`
endsnippet

context "math()"
snippet "(ln)|(log)|(exp)" "log-like functions" rA
\\`!p snip.rv = match.group(0)`
endsnippet

context "math()"
snippet "(max)|(min)|(sup)|(inf)" "max-min/sup-inf/lim" rA
\\`!p snip.rv = match.group(0)`
endsnippet

context "math()"
snippet "(lim)|(to)" "limit stuff" rA
\\`!p snip.rv = match.group(0)`
endsnippet

##################
##  DELIMITERS  ##
##################
context "math()"
snippet << "angle brackets" iA
\\langle ${1:${VISUAL}}\\rangle
endsnippet

priority 10
context "math()"
snippet ll( "large parentheses" iA
\\paren{${1:${VISUAL}}}$0
endsnippet

priority 0
context "math()"
snippet ( "parentheses" iA
(${1:${VISUAL}})$0
endsnippet

priority 10
context "math()"
snippet ll[ "large brackets" iA
\\brack{${1:${VISUAL}}}$0
endsnippet

priority 0
context "math()"
snippet [ "brackets" iA
[${1:${VISUAL}}]$0
endsnippet

context text_after_cursor_matches(snip, "\)")
snippet ) "duplicate closing parentheses" iA

endsnippet

snippet { "braces" iA
\{${1:${VISUAL}}\}$0
endsnippet

context text_after_cursor_matches(snip, "}")
snippet } "duplicate closing brace" iA

endsnippet

priority 10
snippet \{ "escaped braces" iA
\\{${1:${VISUAL}}\\}$0
endsnippet
priority 0

context "math()"
snippet | "absolute value" iA
\\abs{${1:${VISUAL}}}$0
endsnippet

priority 10
context "math()"
snippet abs{| "norm" iA
norm{
endsnippet
priority 0

#############
##  GREEK  ##
#############
context "math() and not text_inside_command(snip)"
snippet "[gG][a-zA-Z]" "greek alphabet" rA
\\`!p snip.rv = greek(match.group(0))`
endsnippet

context "math()"
snippet "pi" "pi" rA
\\pi
endsnippet

##################
##  SET THEORY  ##
##################
context "math()"
snippet "\b(in)|(set)|(cup)|(cap)" "set stuff" rA
\\`!p snip.rv = match.group(0)`
endsnippet

#############
##  LOGIC  ##
#############
context "math()"
snippet "(neg)|(not)" "negation" rA
\\neg
endsnippet
# \neg and \lnot are EXACTLY the same
# \lnot is an alias for \neg

context "math() and not text_inside_command(snip)"
snippet and "logical and" iA
\\land
endsnippet

context "math() and not text_inside_command(snip)"
snippet or "or" iA
\\lor
endsnippet

priority 10
context "math() and not text_inside_command(snip)"
snippet xor "xor" iA
\\lxor
endsnippet
priority 0

context "math()"
snippet "(imp)|(=>)" "implies" rA
\\implies`!p snip.rv = space(t[1])`$1
endsnippet

context "math()"
snippet =- "equivalence" iA
\\equiv
endsnippet

snippet TT "true" iA
\\true
endsnippet

snippet FF "false" iA
\\false
endsnippet

context "math()"
snippet all "forall" iA
\\forall
endsnippet

context "math()"
snippet ee "exists" iA
\\exists
endsnippet

############
##  MISC  ##
############
context "text()"
snippet " ([b-zB-HJ-Z])([ ,.:?!])" "one-letter variables" rA
`!p snip.rv = ' $' + match.group(1) + '$' + match.group(2)`
endsnippet

context "text()"
snippet $ "inline math" iA
\$${1:${VISUAL}}\$$0
endsnippet

context "text()"
snippet dm "display math" A
\\[
	${1:${VISUAL}}
\\]$0
endsnippet

context "math()"
snippet // "fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet == "&=" iA
&=
endsnippet

context "math()"
snippet 1/ "reciprocal" iA
\\frac{1}{${1:${VISUAL}}}$0
endsnippet
